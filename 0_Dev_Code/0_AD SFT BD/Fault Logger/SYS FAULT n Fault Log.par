        
#@ 240914 




#$ Deserializer 24번 핀 - Host의 Ext Flash에 대한 접근 권한 요청 (양책임님 - V2에서 HW Rev으로 반영 예정)
#$ 아래는 예시 
#$ Net name : EXT_FLASH_EN 
#$ Direction : Deserializer -> EXT_FLASH_EN -> Indigo4 
#$ 평소에는 Low. "FW 업데이트 요청 및 FW Writing" 중에는 High 유지. FW 업데이트 완료되면 Low Return  
#$                            --------------------------------------------------                                3.3V 
#$      idle (low )           |     Fault Log Request (high)                   |      completed (low)
#$ ----------------------------                                                -------------------------------- 0V 
#$ high 상태 : Indigo의 SPI Switch IC disabled -> Host의 Ext Flash 접근 불가 
#$ low 상태 : Indigo의 SPI Switch IC enabled -> Host의 Ext Flash 접근 가능 


#$ Indigo 변수 
#$ RAM      0xnnnnnnnn   Fault_Occurrence   : 0x00000000   NO,   NOT 0x00000000   YES,                                      Indigo만 RW  



#! 고려사항 
#! Indigo의 Event Handler 구간에는 시간 소요가 최대한 적게 소요되어야 함. Timer 주기가 어긋나지 않도록. 

#! Host와 Indigo 간에 Int Flash를 쓰고 읽는 과정에서 버스 충돌이 발생할 수도 있으므로, 별도의 Pin(EXT_FLASH_EN)이 있어야 한다고 판단 됨. 해당 Pin으로 Sequence 기준을 잡을 수 있음. 
#! Host가 FW를 Writing하다가 통신 실패가 될 수도 있기 때문에, 완료 됐을 때 Host가 직접 Flag를 남겨야 함. 

#! EXT_FLASH_EN pin의 기능이 FW Update와 겹침. Indigo에서는 상태 변수로 조건 분기 시켜야 함. 


#! FW Update의 시작 주체는 Host, Fault Log의 시작 주체는 Indigo 
#! Fault Log는 주기적 반복. 
#! FW Update는 비반복적. 
#! EXT_FLASH_EN pin 컨트롤 주체는 Host 
#! SPI Switch IC En/Dis 컨트롤 주체는 Indigo. (FW Update와 Fault Log의 동시 수행이나 수행 순서에 따라, 잘못하면 FW Update 도중에 Host의 접근을 막아버릴 수도 있음.)

#! Int/Ext Flash : Indigo가 Write를 먼저 하고, Host가 Write. (Fault는 Indigo에서 발생. )

#^ Host 입장에서 순서 요약 
#^ 1. Indigo로부터 SYS_FAULT pin 신호 수신 (Fualt occured)
#^ 2. EXT_FLASH_EN pin OUTPUT high (접근 권한 요청)
#^ 3. Read Fault Log 
#^ 4. EXT_FLASH_EN pin OUTPUT low (접근 권한 해제)


Timeline 
1. Indigo - Fault_Occurrence 변수 Check 
1-1. Occurred (NOT 0x00000000) -> 2번으로 이동 
1-2. Not Occurred (0x00000000) -> Event Exit 

2. Indigo - Fault Log Hex2Bit (30여개 이상의 32bit 단위 flag 변수를 32bit 정도의 bit 단위 flag로 변환)
3. Indigo - Fault Logger (Flash에 Write) #? Int? Ext? 
4. Indigo - SYS_FAULT pin OUTPUT Low (Indigo -> Host) 

5. Host - EXT_FLASH_EN pin OUTPUT High 

6. Indigo - EXT_FLASH_EN pin check 







2. Indigo - Fault_Log_Read_Flag 변수 check (Host의 log read 완료 여부 확인) 
2-1. if 0xFFFFFFFF, Finished reading? -> 
2-2. Not yet? -> 

2. Indigo - Fault Log Hex2Bit 
3. Indigo - Fault Logger (Flash에 Write) #? Int? Ext? 


Indigo - Fault_Log_Read_Flag = 
4. Indigo - SYS_FAULT pin OUTPUT (Indigo -> Host) #? high? low? 

5. Host - EXT_FLASH_EN pin OUTPUT high (Host -> Indigo) 

6. Indigo - EXT_FLASH_EN pin detection 
6-1. if Low 
            Host의 Read 완료         
6-2. if high 












Host - EXT_FLASH_EN pin OUTPUT low 
Indigo - Fault_Occurrence clear (0x00000000)




1. Host - i2c로 Int Flash 특정 영역에 F/W version write #? 위치 정해야 함. 예를 들어 47 sector의 n 번지. 
2. Host - Ext Flash 접근 권한 요청 (Host의 Deserializer 24번 pin EXT_FLASH_EN 제어, High Output) 

3. Indigo - Event n 에서 Ext Flash 접근 권한 요청 handling (EXT_FLASH_EN pin) #? Low or High?
3-1. if Low 
    3-1-1. if (FW_Update_Process_Status == 0xFFFFFFFF),
                                                    SPI Switch IC Disable (Host 차단)
                                                    w32 FW_Update_Process_Status 0x00000000
        3-1-1-1. if (FW_Update_Flag == 0xFFFFFFFF), FW Writing 완료 
                                                    FW_Update_Flag - 별도 영역에 복사 이후, 0x00000000으로 초기화.  
                                                    Event Exit 
        3-1-1-2. if (FW_Update_Flag == 0x00000000), Host의 통신 실패 
                                                    Event Exit 
        # 업데이트 완료 여부에 따라서, FW_Update_Flag 값을 따로 복사해두고, 실제 Indigo FW update 시에 check용으로 활용.
    3-1-2. if (FW_Update_Process_Status == 0x00000000), 업데이트 없거나, Ver이 안 맞음. 
                                                        Event Exit 
3-2. if High -> 4번으로 이동

4. FW_Update_Process_Status 변수 상태 확인       #? Indigo 입장에서, Pin Low 상태에서는 계속 FW ver read와 Switch IC Enable을 반복해서 해줘야 하는 문제가 있음. 그래서 Status 변수 하나 추가함.  
4-1. 변수 상태가 idle or completed, -> 5번으로 이동  
4-2. 변수 상태가 FW update request & writing, -> Event Exit #? 이미 Switch IC enable했고, Ver도 확인 된 상태이므로, 추가 작업 불필요. 

5. Indigo - Int Flash 특정 영역에 F/W version read (현 Ver과 신 Ver에 대한 비교)
5-1. 신규 FW가 맞다면, -> 6번으로 이동 
5-2. 신규 FW가 아니면, -> Reject & Event Exit #? Reject를 어떻게 할 건지? Reject를 해줘야 Host가 EXT_FLASH_EN을 High return. 5번에서 Host가 반복 read를 해도 값이 안 읽어지면 Indigo가 Reject한 걸로 판단?  

6. Ext Flash 접근 권한 수락 
Indigo - Ext Flash에 대한 Switch IC Enable (SPI_EIRQ? pin 제어), w32 FW_Update_Process_Status 0xFFFFFFFF
Host - Ext Flash에 대해 접근 시도를 하다가, Switch IC Enable 되면 본격적으로 신규 FW Writing 
#? FW Writing Ready 상태를 알려주면 좋겠는데... 일단은 Ext Flash 특정 영역에 특정 값을 정하고, Host가 해당 값이 올바르게 읽어지면 Writing 시작하는 걸로... 예 : nn Sector n번지에 0xFEEDCAFE 

7. Host - Ext Flash 신규 FW writing....... 
7-1. writing 중이면, Indigo - Event Exit (4번에서 Event Exit 자동 수행)
7-2. Writing 완료되면, Host - w32 FW_Update_Flag 0xFFFFFFFF, Ext Flash 접근 권한 요청 해제 (Host의 Deserializer 24번 핀 EXT_FLASH_EN 제어, Low Output) 
                      Indigo - 3번에서 SPI Switch IC Disable, 변수 값 변경 (w32 FW_Update_Process_Status 0x00000000) 




















#? 1. 부팅 시 Ext Flash에 저장된 Fault Log Clear 
#? 2. Fault 발생 시 SYS_FAULT pin - Low 출력 
#? 3. Fault 발생 시 Ext Flash에 log 

#? SYS_FAULT pin 신호 주기 전에 HOST에 Ext Flash 접근 권한을 Indigo가 줘야 함. 

###################################################################################################################
###################################################################################################################
###################################################################################################################
## Fault Log Clear 
    #! Indigo4 Power On 시에, Ext. Flash에 저장된 Fault Log 영역 모두 Clear (모든 bit "0")
    #@ Boot Sequence에 존재 해야 함. Booting 이후 최대한 빨리 수행해야함. 
    #? Flash는 Erase만 하면 모든 비트가 1. 따라서 0으로 Write 해야 함. -> 아니면 명세서를 바꿔야 하는데.. 그냥 0으로 write하자. 
    #? SRAM은 Power on되면, 쓰레기 값으로 되어 있으므로, 
    #? 사용 안 하는 영역을 모든 비트 0으로 한 다음에 SRAM에서 Ext Flash로 아래 코드 수정해서 복사.     
# 

fncBegin    #name:
i4fill 0x60000000	0x00000000	10	# Address, value, Count - SRAM 사용 안 하는 영역, Fault Log용으로 잡아야 함. 

w32	0x60140010	0x00000000		# Write C # 상태 확인 Register Clear #
w32	0x60140004	0x60100000		# DST Address : Ext. Flash의 Fault Log 영역 주소 
w32	0x60140008	0x00027000		# Data Size : SRAM 영역 사이즈 
w32	0x6014000C	0x00400000		# SRC Address : SRAM의 0b으로 채운 영역 주소 

w32	0x0002C300	0x60140300		# CMDSEQ1 - 위 설정에 대해 SRAM.CODE Write 영역 실행
fncEnd      #name: 

###################################################################################################################
###################################################################################################################
###################################################################################################################
## SYS_FAULT pin 
    #$ SCH net name : SYS_FAULT[GPIO59] (OK - High, Fault - Low)

## SYS_FAULT - GPIO Init 
w32	0x0000090C	0x00000080		#path:INDIGO4L.GC_PIN.GPIO59_CTL#	- GPIO, DRV_2mA, Pulldown, slow, disable 


###################################################################################################################
###################################################################################################################
###################################################################################################################
## Fault Log 
    #! SRAM에 저장해둔 Fault 정보를 Ext. Flash에 저장. 
    #       7       6       5       4       3       2       1       0 
    # 0x00  12V_OVP 12V_UVP DC1_OVP(1V26) 
    # 0x01
    # 0x02 
    # 0x03
    # 0x04 
    #$ 
#

fncBegin    #name:

w32	0x60140010	0x00000000		# Write C # 상태 확인 Register Clear #
w32	0x60140004	0x60100000		# DST Address : Ext. Flash의 Fault Log 영역 주소 
w32	0x60140008	0x00027000		# Data Size : SRAM 영역 사이즈 
w32	0x6014000C	0x00400000		# SRC Address : SRAM의 Fault Log 영역 


fncEnd      #name: 

